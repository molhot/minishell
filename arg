args:main.c:	if (node->command->args == NULL && node->command->redirect != NULL)
args:main.c:	else if (node->next == NULL && is_builtin(node->command->args->word))
args:main.c:	else if (node->command->args->word != NULL)
args:builtin_command/command_to_array.c:	args = command->args;
args:builtin_command/command_to_array.c:	args = command->args;
args:parser/parser.c:		(*(node->command->redirect)) = NULL;
args:parser/parser.c:	node->next->command->redirect = \
args:parser/parser.c:	node->next->command->args = NULL;
args:parser/parser.c:		(*(node->command->redirect)) = NULL;
args:parser/parser.c:			parse_word(&node->command->args, tokdup(tok), &tok);
args:parser/parse_redirect.c:		node->command->redirect = \
args:parser/parse_redirect.c:	node->command->in_fd[0] = STDIN_FILENO;
args:parser/parse_redirect.c:	node->command->in_fd[1] = -1;
args:parser/parse_redirect.c:	node->command->out_fd[0] = -1;
args:parser/parse_redirect.c:	node->command->out_fd[1] = STDOUT_FILENO;
args:parser/tok_to_redirect.c:	parse_redirect(&(*node->command->redirect), &(*tok));
args:parser/tok_to_redirect.c:	(*node->command->redirect)->ambigous = false;
args:parser/tok_to_redirect.c:	(*node->command->redirect)->before = NULL;
args:parser/tok_to_redirect.c:	return (*node->command->redirect);
args:parser/parser_utils.c:	node->command->args = NULL;
args:parser/parser_utils.c:	node->command->redirect = NULL;
args:parser/parser_utils.c:		if (itr->command->redirect != NULL)
args:parser/parser_utils.c:			if ((*itr->command->redirect) != NULL)
args:parser/parser_utils.c:				free_redirect(*itr->command->redirect);
args:parser/parser_utils.c:			free(itr->command->redirect);
args:parser/parser_utils.c:		free_token(itr->command->args);
args:shell_tester/shell_dir/builtin_command/command_to_array.c:	args = command->args;
args:shell_tester/shell_dir/builtin_command/command_to_array.c:	args = command->args;
args:shell_tester/shell_dir/main.c:	if (node->command->args == NULL && node->command->redirect != NULL)
args:shell_tester/shell_dir/main.c:	else if (node->next == NULL && is_builtin(node->command->args->word))
args:shell_tester/shell_dir/main.c:	else if (node->command->args->word != NULL)
args:shell_tester/shell_dir/parser/parser.c:		(*(node->command->redirect)) = NULL;
args:shell_tester/shell_dir/parser/parser.c:	node->next->command->redirect = \
args:shell_tester/shell_dir/parser/parser.c:	node->next->command->args = NULL;
args:shell_tester/shell_dir/parser/parser.c:		(*(node->command->redirect)) = NULL;
args:shell_tester/shell_dir/parser/parser.c:			parse_word(&node->command->args, tokdup(tok), &tok);
args:shell_tester/shell_dir/parser/parser_utils.c:	node->command->args = NULL;
args:shell_tester/shell_dir/parser/parser_utils.c:	node->command->redirect = NULL;
args:shell_tester/shell_dir/parser/parser_utils.c:		if (itr->command->redirect != NULL)
args:shell_tester/shell_dir/parser/parser_utils.c:			if ((*itr->command->redirect) != NULL)
args:shell_tester/shell_dir/parser/parser_utils.c:				free_redirect(*itr->command->redirect);
args:shell_tester/shell_dir/parser/parser_utils.c:			free(itr->command->redirect);
args:shell_tester/shell_dir/parser/parser_utils.c:		free_token(itr->command->args);
args:shell_tester/shell_dir/parser/parse_redirect.c:		node->command->redirect = \
args:shell_tester/shell_dir/parser/parse_redirect.c:	node->command->in_fd[0] = STDIN_FILENO;
args:shell_tester/shell_dir/parser/parse_redirect.c:	node->command->in_fd[1] = -1;
args:shell_tester/shell_dir/parser/parse_redirect.c:	node->command->out_fd[0] = -1;
args:shell_tester/shell_dir/parser/parse_redirect.c:	node->command->out_fd[1] = STDOUT_FILENO;
args:shell_tester/shell_dir/parser/tok_to_redirect.c:	parse_redirect(&(*node->command->redirect), &(*tok));
args:shell_tester/shell_dir/parser/tok_to_redirect.c:	(*node->command->redirect)->ambigous = false;
args:shell_tester/shell_dir/parser/tok_to_redirect.c:	(*node->command->redirect)->before = NULL;
args:shell_tester/shell_dir/parser/tok_to_redirect.c:	return (*node->command->redirect);
args:shell_tester/shell_dir/exec_func/exec_builtin.c:	if (ft_strcmp(command->args->word, "env") == 0)
args:shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "export", 6) == 0)
args:shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "pwd", 3) == 0)
args:shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "cd", 2) == 0)
args:shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "exit", 4) == 0)
args:shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "unset", 5) == 0)
args:shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "echo", 4) == 0)
args:shell_tester/shell_dir/exec_func/builtin_exec.c:	argv = args_to_argv(node->command->args);
args:shell_tester/shell_dir/exec_func/builtin_exec.c:	redirect_recover(node->command->redirect);
args:shell_tester/shell_dir/exec_func/redirect_file.c:		redirect = *(node->command->redirect);
args:shell_tester/shell_dir/exec_func/redirect_file.c:	if (command->redirect == NULL)
args:shell_tester/shell_dir/exec_func/redirect_file.c:	redirect = *(command->redirect);
args:shell_tester/shell_dir/exec_func/exec_func.c:	if (is_builtin(node->command->args->word))
args:shell_tester/shell_dir/exec_func/exec_func.c:		exit(do_builtin(node->command->args->word, node->command));
args:shell_tester/shell_dir/exec_func/exec_func.c:	redirect = *(node->command->redirect);
args:shell_tester/shell_dir/exec_func/exec_func.c:	argv = args_to_argv(node->command->args);
args:shell_tester/shell_dir/exec_func/pipe_func.c:	if (pipe(node->command->out_fd) < 0)
args:shell_tester/shell_dir/exec_func/pipe_func.c:	dst = node->next->command->in_fd;
args:shell_tester/shell_dir/exec_func/pipe_func.c:	src = node->command->out_fd;
args:shell_tester/shell_dir/exec_func/pipe_func.c:	if (node->command->out_fd[0] != -1)
args:shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->out_fd[0]);
args:shell_tester/shell_dir/exec_func/pipe_func.c:	dup2(node->command->in_fd[0], STDIN_FILENO);
args:shell_tester/shell_dir/exec_func/pipe_func.c:	if (node->command->in_fd[0] != STDIN_FILENO)
args:shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->in_fd[0]);
args:shell_tester/shell_dir/exec_func/pipe_func.c:	dup2(node->command->out_fd[1], STDOUT_FILENO);
args:shell_tester/shell_dir/exec_func/pipe_func.c:	if (node->command->out_fd[1] != STDOUT_FILENO)
args:shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->out_fd[1]);
args:shell_tester/shell_dir/exec_func/pipe_func.c:	if (node->command->in_fd[0] != STDIN_FILENO)
args:shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->in_fd[0]);
args:shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->out_fd[1]);
args:shell_tester/shell_dir/exec_func/redirect_file_utils.c:	command->now_in = file_fd;
args:shell_tester/shell_dir/expand/expand.c:		token = node->command->args;
args:shell_tester/shell_dir/expand/expand.c:		if (node->command->args != NULL)
args:shell_tester/shell_dir/expand/expand.c:			node->command->args = expand_simplecommand(token);
args:shell_tester/shell_dir/expand/expand.c:		if (node->command->redirect != NULL)
args:shell_tester/shell_dir/expand/expand.c:			redirect = *(node->command->redirect);
args:shell_tester/shell_dir/expand/expand.c:			*(node->command->redirect) = expand_redirect_ten(redirect);
args:shell_tester/shell_dir/expand/expand_test.c:// 	printf("%s\n", n->command->args->word);
args:shell_tester/shell_dir/expand/expand_test.c:// 	printf("%s\n", (*n->command->redirect)->file_path);
args:exec_func/exec_builtin.c:	if (ft_strcmp(command->args->word, "env") == 0)
args:exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "export", 6) == 0)
args:exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "pwd", 3) == 0)
args:exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "cd", 2) == 0)
args:exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "exit", 4) == 0)
args:exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "unset", 5) == 0)
args:exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "echo", 4) == 0)
args:expand/expand.c:		token = node->command->args;
args:expand/expand.c:		if (node->command->args != NULL)
args:expand/expand.c:			node->command->args = expand_simplecommand(token);
args:expand/expand.c:		if (node->command->redirect != NULL)
args:expand/expand.c:			redirect = *(node->command->redirect);
args:expand/expand.c:			*(node->command->redirect) = expand_redirect_ten(redirect);
args:exec_func/redirect_file.c:		redirect = *(node->command->redirect);
args:exec_func/redirect_file.c:	if (command->redirect == NULL)
args:exec_func/redirect_file.c:	redirect = *(command->redirect);
args:expand/expand_test.c:// 	printf("%s\n", n->command->args->word);
args:expand/expand_test.c:// 	printf("%s\n", (*n->command->redirect)->file_path);
args:exec_func/exec_func.c:	if (is_builtin(node->command->args->word))
args:exec_func/exec_func.c:		exit(do_builtin(node->command->args->word, node->command));
args:exec_func/exec_func.c:	// redirect = *(node->command->redirect);
args:exec_func/exec_func.c:	argv = args_to_argv(node->command->args);
args:exec_func/pipe_func.c:	if (pipe(node->command->out_fd) < 0)
args:exec_func/pipe_func.c:	dst = node->next->command->in_fd;
args:exec_func/pipe_func.c:	src = node->command->out_fd;
args:exec_func/pipe_func.c:	if (node->command->out_fd[0] != -1)
args:exec_func/pipe_func.c:		close(node->command->out_fd[0]);
args:exec_func/pipe_func.c:	dup2(node->command->in_fd[0], STDIN_FILENO);
args:exec_func/pipe_func.c:	if (node->command->in_fd[0] != STDIN_FILENO)
args:exec_func/pipe_func.c:		close(node->command->in_fd[0]);
args:exec_func/pipe_func.c:	dup2(node->command->out_fd[1], STDOUT_FILENO);
args:exec_func/pipe_func.c:	if (node->command->out_fd[1] != STDOUT_FILENO)
args:exec_func/pipe_func.c:		close(node->command->out_fd[1]);
args:exec_func/pipe_func.c:	if (node->command->in_fd[0] != STDIN_FILENO)
args:exec_func/pipe_func.c:		close(node->command->in_fd[0]);
args:exec_func/pipe_func.c:		close(node->command->out_fd[1]);
args:exec_func/builtin_exec.c:	argv = args_to_argv(node->command->args);
args:exec_func/builtin_exec.c:	redirect_recover(node->command->redirect);
args:exec_func/redirect_file_utils.c:	command->now_in = file_fd;
builtin_command/command_to_array.c:	args = command->args;
builtin_command/command_to_array.c:	args = command->args;
main.c:	if (node->command->args == NULL && node->command->redirect != NULL)
main.c:	else if (node->next == NULL && is_builtin(node->command->args->word))
main.c:	else if (node->command->args->word != NULL)
parser/parse_redirect.c:		node->command->redirect = \
parser/parse_redirect.c:	node->command->in_fd[0] = STDIN_FILENO;
parser/parse_redirect.c:	node->command->in_fd[1] = -1;
parser/parse_redirect.c:	node->command->out_fd[0] = -1;
parser/parse_redirect.c:	node->command->out_fd[1] = STDOUT_FILENO;
parser/parser.c:		(*(node->command->redirect)) = NULL;
parser/parser.c:	node->next->command->redirect = \
parser/parser.c:	node->next->command->args = NULL;
parser/parser.c:		(*(node->command->redirect)) = NULL;
parser/parser.c:			parse_word(&node->command->args, tokdup(tok), &tok);
parser/parser_utils.c:	node->command->args = NULL;
parser/parser_utils.c:	node->command->redirect = NULL;
parser/parser_utils.c:		if (itr->command->redirect != NULL)
parser/parser_utils.c:			if ((*itr->command->redirect) != NULL)
parser/parser_utils.c:				free_redirect(*itr->command->redirect);
parser/parser_utils.c:			free(itr->command->redirect);
parser/parser_utils.c:		free_token(itr->command->args);
shell_tester/shell_dir/exec_func/builtin_exec.c:	argv = args_to_argv(node->command->args);
shell_tester/shell_dir/exec_func/builtin_exec.c:	redirect_recover(node->command->redirect);
shell_tester/shell_dir/exec_func/pipe_func.c:	if (pipe(node->command->out_fd) < 0)
shell_tester/shell_dir/exec_func/pipe_func.c:	dst = node->next->command->in_fd;
shell_tester/shell_dir/exec_func/pipe_func.c:	src = node->command->out_fd;
shell_tester/shell_dir/exec_func/pipe_func.c:	if (node->command->out_fd[0] != -1)
shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->out_fd[0]);
shell_tester/shell_dir/exec_func/pipe_func.c:	dup2(node->command->in_fd[0], STDIN_FILENO);
shell_tester/shell_dir/exec_func/pipe_func.c:	if (node->command->in_fd[0] != STDIN_FILENO)
shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->in_fd[0]);
shell_tester/shell_dir/exec_func/pipe_func.c:	dup2(node->command->out_fd[1], STDOUT_FILENO);
shell_tester/shell_dir/exec_func/pipe_func.c:	if (node->command->out_fd[1] != STDOUT_FILENO)
shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->out_fd[1]);
shell_tester/shell_dir/exec_func/pipe_func.c:	if (node->command->in_fd[0] != STDIN_FILENO)
shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->in_fd[0]);
shell_tester/shell_dir/exec_func/pipe_func.c:		close(node->command->out_fd[1]);
shell_tester/shell_dir/builtin_command/command_to_array.c:	args = command->args;
shell_tester/shell_dir/builtin_command/command_to_array.c:	args = command->args;
shell_tester/shell_dir/exec_func/redirect_file.c:		redirect = *(node->command->redirect);
shell_tester/shell_dir/exec_func/redirect_file.c:	if (command->redirect == NULL)
shell_tester/shell_dir/exec_func/redirect_file.c:	redirect = *(command->redirect);
shell_tester/shell_dir/exec_func/exec_func.c:	if (is_builtin(node->command->args->word))
shell_tester/shell_dir/exec_func/exec_func.c:		exit(do_builtin(node->command->args->word, node->command));
shell_tester/shell_dir/exec_func/exec_func.c:	redirect = *(node->command->redirect);
shell_tester/shell_dir/exec_func/exec_func.c:	argv = args_to_argv(node->command->args);
shell_tester/shell_dir/exec_func/exec_builtin.c:	if (ft_strcmp(command->args->word, "env") == 0)
shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "export", 6) == 0)
shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "pwd", 3) == 0)
shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "cd", 2) == 0)
shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "exit", 4) == 0)
shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "unset", 5) == 0)
shell_tester/shell_dir/exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "echo", 4) == 0)
shell_tester/shell_dir/exec_func/redirect_file_utils.c:	command->now_in = file_fd;
shell_tester/shell_dir/main.c:	if (node->command->args == NULL && node->command->redirect != NULL)
shell_tester/shell_dir/main.c:	else if (node->next == NULL && is_builtin(node->command->args->word))
shell_tester/shell_dir/main.c:	else if (node->command->args->word != NULL)
shell_tester/shell_dir/parser/parser.c:		(*(node->command->redirect)) = NULL;
shell_tester/shell_dir/parser/parser.c:	node->next->command->redirect = \
shell_tester/shell_dir/parser/parser.c:	node->next->command->args = NULL;
shell_tester/shell_dir/parser/parser.c:		(*(node->command->redirect)) = NULL;
shell_tester/shell_dir/parser/parser.c:			parse_word(&node->command->args, tokdup(tok), &tok);
shell_tester/shell_dir/parser/tok_to_redirect.c:	parse_redirect(&(*node->command->redirect), &(*tok));
shell_tester/shell_dir/parser/tok_to_redirect.c:	(*node->command->redirect)->ambigous = false;
shell_tester/shell_dir/parser/tok_to_redirect.c:	(*node->command->redirect)->before = NULL;
shell_tester/shell_dir/parser/tok_to_redirect.c:	return (*node->command->redirect);
shell_tester/shell_dir/parser/parser_utils.c:	node->command->args = NULL;
shell_tester/shell_dir/parser/parser_utils.c:	node->command->redirect = NULL;
shell_tester/shell_dir/parser/parser_utils.c:		if (itr->command->redirect != NULL)
shell_tester/shell_dir/parser/parser_utils.c:			if ((*itr->command->redirect) != NULL)
shell_tester/shell_dir/parser/parser_utils.c:				free_redirect(*itr->command->redirect);
shell_tester/shell_dir/parser/parser_utils.c:			free(itr->command->redirect);
shell_tester/shell_dir/parser/parser_utils.c:		free_token(itr->command->args);
shell_tester/shell_dir/parser/parse_redirect.c:		node->command->redirect = \
shell_tester/shell_dir/parser/parse_redirect.c:	node->command->in_fd[0] = STDIN_FILENO;
shell_tester/shell_dir/parser/parse_redirect.c:	node->command->in_fd[1] = -1;
shell_tester/shell_dir/parser/parse_redirect.c:	node->command->out_fd[0] = -1;
shell_tester/shell_dir/parser/parse_redirect.c:	node->command->out_fd[1] = STDOUT_FILENO;
parser/tok_to_redirect.c:	parse_redirect(&(*node->command->redirect), &(*tok));
parser/tok_to_redirect.c:	(*node->command->redirect)->ambigous = false;
parser/tok_to_redirect.c:	(*node->command->redirect)->before = NULL;
parser/tok_to_redirect.c:	return (*node->command->redirect);
shell_tester/shell_dir/expand/expand.c:		token = node->command->args;
shell_tester/shell_dir/expand/expand.c:		if (node->command->args != NULL)
shell_tester/shell_dir/expand/expand.c:			node->command->args = expand_simplecommand(token);
shell_tester/shell_dir/expand/expand.c:		if (node->command->redirect != NULL)
shell_tester/shell_dir/expand/expand.c:			redirect = *(node->command->redirect);
shell_tester/shell_dir/expand/expand.c:			*(node->command->redirect) = expand_redirect_ten(redirect);
shell_tester/shell_dir/expand/expand_test.c:// 	printf("%s\n", n->command->args->word);
shell_tester/shell_dir/expand/expand_test.c:// 	printf("%s\n", (*n->command->redirect)->file_path);
expand/expand_test.c:// 	printf("%s\n", n->command->args->word);
expand/expand_test.c:// 	printf("%s\n", (*n->command->redirect)->file_path);
expand/expand.c:		token = node->command->args;
expand/expand.c:		if (node->command->args != NULL)
expand/expand.c:			node->command->args = expand_simplecommand(token);
expand/expand.c:		if (node->command->redirect != NULL)
expand/expand.c:			redirect = *(node->command->redirect);
expand/expand.c:			*(node->command->redirect) = expand_redirect_ten(redirect);
exec_func/redirect_file.c:		redirect = *(node->command->redirect);
exec_func/redirect_file.c:	if (command->redirect == NULL)
exec_func/redirect_file.c:	redirect = *(command->redirect);
exec_func/exec_builtin.c:	if (ft_strcmp(command->args->word, "env") == 0)
exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "export", 6) == 0)
exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "pwd", 3) == 0)
exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "cd", 2) == 0)
exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "exit", 4) == 0)
exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "unset", 5) == 0)
exec_func/exec_builtin.c:	else if (ft_strncmp(command->args->word, "echo", 4) == 0)
exec_func/builtin_exec.c:	argv = args_to_argv(node->command->args);
exec_func/builtin_exec.c:	redirect_recover(node->command->redirect);
exec_func/exec_func.c:	if (is_builtin(node->command->args->word))
exec_func/exec_func.c:		exit(do_builtin(node->command->args->word, node->command));
exec_func/exec_func.c:	// redirect = *(node->command->redirect);
exec_func/exec_func.c:	argv = args_to_argv(node->command->args);
exec_func/pipe_func.c:	if (pipe(node->command->out_fd) < 0)
exec_func/pipe_func.c:	dst = node->next->command->in_fd;
exec_func/pipe_func.c:	src = node->command->out_fd;
exec_func/pipe_func.c:	if (node->command->out_fd[0] != -1)
exec_func/pipe_func.c:		close(node->command->out_fd[0]);
exec_func/pipe_func.c:	dup2(node->command->in_fd[0], STDIN_FILENO);
exec_func/pipe_func.c:	if (node->command->in_fd[0] != STDIN_FILENO)
exec_func/pipe_func.c:		close(node->command->in_fd[0]);
exec_func/pipe_func.c:	dup2(node->command->out_fd[1], STDOUT_FILENO);
exec_func/pipe_func.c:	if (node->command->out_fd[1] != STDOUT_FILENO)
exec_func/pipe_func.c:		close(node->command->out_fd[1]);
exec_func/pipe_func.c:	if (node->command->in_fd[0] != STDIN_FILENO)
exec_func/pipe_func.c:		close(node->command->in_fd[0]);
exec_func/pipe_func.c:		close(node->command->out_fd[1]);
exec_func/redirect_file_utils.c:	command->now_in = file_fd;
